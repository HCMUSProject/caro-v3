{"version":3,"sources":["components/Cell.js","components/Line.js","components/Board.js","components/History.js","components/Game.js","actions/index.js","containers/GameContainer.js","App.js","reducers/turn.reducer.js","reducers/winner.reducer.js","reducers/history.reducer.js","reducers/index.js","index.js"],"names":["Cell","row","col","val","onClick","player","notClickable","winner","id","type","className","defaultProps","Line","pointStart","pointEnd","cellWidth","playerDisplay","pStart","pEnd","x","y","d","Board","board","listPoints","map","iRow","key","cell","iCol","uuidv1","el","cellStart","document","querySelector","cellEnd","offsetLeft","offsetTop","offsetWidth","size","numToWin","History","history","jumpTo","toggleSort","selected","sort","sortIcon","Card","Content","Button","icon","label","Description","List","his","p1","p2","step","lastPosition","desc","isSelect","Item","primary","fluid","renderMoves","Game","xIsNext","setStep","setTurn","addHistoryItem","setWinner","emptyHistory","useState","open","setOpen","sortASC","setSort","boardDisplay","list","listPointsDisplay","isTerminated","retH","points","isBlockOutAbove","isBlockOutBelow","curPlayer","count","push","i","splice","length","hasWinner","checkingHorizontal","retV","checkingVertical","retM","j","checkingMainDiagonal","retS","checkingSubDiagonal","Header","as","strPlayer","status","every","showPlayer","currentHistory","slice","currentBoard","arr","result","newStep","Confirm","header","content","onCancel","onConfirm","SET_TURN","SET_WINNER","ADD_HISTORY_ITEM","SET_STEP","EMPTY_HISTORY","GameContainer","connect","state","dispatch","setHistoryStep","turn","historyItem","App","action","initialState","Array","fill","concat","combineReducers","store","createStore","rootReducer","window","__REDUX_DEVTOOLS_EXTENSION__","render","getElementById"],"mappings":"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","file":"static/js/main.1787178c.chunk.js","sourcesContent":["import React from 'react';\n\nconst Cell = ({ row, col, val, onClick, winner }) => {\n  let player = '';\n  if (val !== null) {\n    player = val === 1 ? ' X' : ' O';\n  }\n\n  let notClickable = ' not-clickable';\n\n  if (!winner && val === null) {\n    notClickable = '';\n  }\n  return (\n    <button\n      id={`cell-${row}-${col}`}\n      type='button'\n      className={`board-cell player${player + notClickable}`}\n      onClick={() => onClick(row, col)}\n    >\n      {player}\n    </button>\n  );\n};\n\nCell.defaultProps = {\n  val: null,\n};\n\nexport default Cell;\n","import React from 'react';\n\nconst Line = ({ pointStart, pointEnd, cellWidth, player }) => {\n  const playerDisplay = player === 1 ? 'X' : 'O';\n\n  let pStart = {};\n  const pEnd = {};\n\n  if (!pStart.x && pointStart.y === pointEnd.y) {\n    pStart.x = pointStart.x;\n    pEnd.x = pointEnd.x + cellWidth;\n\n    pStart.y = pointStart.y + cellWidth / 2;\n    pEnd.y = pointEnd.y + cellWidth / 2;\n  }\n\n  if (!pStart.x && pointStart.x === pointEnd.x) {\n    pStart.y = pointStart.y;\n    pEnd.y = pointEnd.y + cellWidth;\n\n    pStart.x = pointStart.x + cellWidth / 2;\n    pEnd.x = pointEnd.x + cellWidth / 2;\n  }\n\n  if (!pStart.x && pointEnd.x - pointStart.x === pointEnd.y - pointStart.y) {\n    pStart = pointStart;\n\n    pEnd.x = pointEnd.x + cellWidth;\n    pEnd.y = pointEnd.y + cellWidth;\n  }\n\n  if (!pStart.x && pointEnd.x - pointStart.x === -(pointEnd.y - pointStart.y)) {\n    pStart.x = pointStart.x + cellWidth;\n    pStart.y = pointStart.y;\n\n    pEnd.x = pointEnd.x;\n    pEnd.y = pointEnd.y + cellWidth;\n  }\n\n  return (\n    <path\n      className={`line ${playerDisplay}`}\n      d={`M${pStart.x} ${pStart.y} L${pEnd.x} ${pEnd.y}`}\n    />\n  );\n};\n\nexport default Line;\n","import React from 'react';\nimport uuidv1 from 'uuid/v1';\nimport Cell from './Cell';\nimport Line from './Line';\n\nconst Board = ({ board, onClick, winner, listPoints }) => {\n  const renderBoard = () => {\n    return board.map((row, iRow) => {\n      return (\n        // eslint-disable-next-line react/no-array-index-key\n        <div key={iRow} className='board-row'>\n          {row.map((cell, iCol) => {\n            return (\n              <Cell\n                // eslint-disable-next-line react/no-array-index-key\n                key={uuidv1()}\n                row={iRow}\n                col={iCol}\n                val={cell}\n                onClick={onClick}\n                winner={winner}\n              />\n            );\n          })}\n        </div>\n      );\n    });\n  };\n\n  const renderLines = () =>\n    listPoints.map(el => {\n      const pStart = el[0];\n      const pEnd = el[1];\n\n      const cellStart = document.querySelector(\n        `#cell-${pStart.row}-${pStart.col}`,\n      );\n\n      const cellEnd = document.querySelector(`#cell-${pEnd.row}-${pEnd.col}`);\n      return (\n        <Line\n          key={uuidv1()}\n          pointStart={{ x: cellStart.offsetLeft, y: cellStart.offsetTop }}\n          pointEnd={{ x: cellEnd.offsetLeft, y: cellEnd.offsetTop }}\n          cellWidth={cellEnd.offsetWidth}\n          player={board[pStart.row][pStart.col]}\n        />\n      );\n    });\n\n  return (\n    <div id='board'>\n      {renderBoard()}\n      <svg className='draw-lines'>{winner !== null && renderLines()}</svg>\n    </div>\n  );\n};\n\nBoard.defaultProps = {\n  size: 20,\n  numToWin: 5,\n};\n\nexport default Board;\n","import React from 'react';\nimport { Card, List, Button } from 'semantic-ui-react';\n\nconst History = ({ history, jumpTo, toggleSort, selected, sort }) => {\n  const renderMoves = () => {\n    if (!history) return <></>;\n\n    // default : sort = true\n\n    // clone to new history\n    let his = [...history];\n    his = his.sort((p1, p2) => {\n      const comp = p1.id <= p2.id;\n      return comp === sort ? -1 : 1;\n    });\n\n    return his.map(step => {\n      const { lastPosition, id } = step;\n      const desc = id\n        ? `Move to #${id}. Position [${lastPosition.x},${lastPosition.y}]`\n        : 'Go to game start';\n\n      const isSelect = id === selected;\n      return (\n        // eslint-disable-next-line react/no-array-index-key\n        <List.Item key={id}>\n          <Button\n            primary={isSelect}\n            size='small'\n            fluid\n            onClick={() => jumpTo(id)}\n          >\n            {desc}\n          </Button>\n        </List.Item>\n      );\n    });\n  };\n\n  const sortIcon = sort ? 'angle down' : 'angle up';\n\n  return (\n    <Card className='history-block'>\n      <Card.Content>\n        <div className='box-title'>\n          <h6 className='history-title'>History</h6>\n          <Button\n            size='mini'\n            icon={sortIcon}\n            onClick={toggleSort}\n            label='Order by'\n          />\n        </div>\n\n        <Card.Description className='history-items'>\n          <List>{renderMoves()}</List>\n        </Card.Description>\n      </Card.Content>\n    </Card>\n  );\n};\n\nexport default History;\n","import React, { useState } from 'react';\nimport { Card, Button, Confirm } from 'semantic-ui-react';\nimport Board from './Board';\nimport History from './History';\n\nconst Game = ({\n  xIsNext,\n  winner,\n  history,\n  setStep,\n  setTurn,\n  addHistoryItem,\n  setWinner,\n  emptyHistory,\n  size = 20,\n  numToWin = 5,\n}) => {\n  const [open, setOpen] = useState(false);\n  const [sortASC, setSort] = useState(true);\n\n  const boardDisplay = [...history.list[history.step].board];\n  const listPointsDisplay = [...history.list[history.step].listPoints];\n\n  const checkingHorizontal = (board, row, col) => {\n    let points = [];\n\n    let isBlockOutAbove = false;\n    let isBlockOutBelow = false;\n\n    const curPlayer = board[row][col];\n\n    // count = 1 la vi tri hien tai.\n    let count = 1;\n    points.push({ row, col });\n\n    // dem ve 2 ben\n    for (let i = col - 1; i >= 0; i -= 1) {\n      if (board[row][i] === curPlayer) {\n        count += 1;\n        points.push({ row, col: i });\n      } else {\n        if (board[row][i] !== null) {\n          isBlockOutAbove = true;\n        }\n        break;\n      }\n    }\n    for (let i = col + 1; i < size; i += 1) {\n      if (board[row][i] === curPlayer) {\n        count += 1;\n        points.push({ row, col: i });\n      } else {\n        if (board[row][i] !== null) {\n          isBlockOutBelow = true;\n        }\n        break;\n      }\n    }\n\n    if (count >= numToWin) {\n      // sort\n      points = points.sort((p1, p2) => {\n        return (p1.row + 1) * size + p1.col <= (p2.row + 1) * size + p2.col\n          ? -1\n          : 1;\n      });\n\n      points.splice(1, points.length - 2);\n\n      if (count > numToWin) {\n        return {\n          hasWinner: true,\n          points,\n        };\n      }\n      return {\n        hasWinner: !(isBlockOutAbove && isBlockOutBelow),\n        points: !(isBlockOutAbove && isBlockOutBelow) ? points : [],\n      };\n    }\n    return {\n      hasWinner: false,\n      points: [],\n    };\n  };\n\n  const checkingVertical = (board, row, col) => {\n    let points = [];\n    let isBlockOutAbove = false;\n    let isBlockOutBelow = false;\n\n    const curPlayer = board[row][col];\n\n    // count = 1 la vi tri hien tai.\n    let count = 1;\n    points.push({ row, col });\n\n    // dem ve 2 ben\n    for (let i = row - 1; i >= 0; i -= 1) {\n      if (board[i][col] === curPlayer) {\n        count += 1;\n        points.push({ row: i, col });\n      } else {\n        if (board[i][col] !== null) {\n          isBlockOutAbove = true;\n        }\n        break;\n      }\n    }\n    for (let i = row + 1; i < size; i += 1) {\n      if (board[i][col] === curPlayer) {\n        count += 1;\n        points.push({ row: i, col });\n      } else {\n        if (board[i][col] !== null) {\n          isBlockOutBelow = true;\n        }\n        break;\n      }\n    }\n\n    if (count >= numToWin) {\n      // sort\n      points = points.sort((p1, p2) => {\n        return (p1.row + 1) * size + p1.col <= (p2.row + 1) * size + p2.col\n          ? -1\n          : 1;\n      });\n\n      points.splice(1, points.length - 2);\n\n      if (count > numToWin) {\n        return {\n          hasWinner: true,\n          points,\n        };\n      }\n      return {\n        hasWinner: !(isBlockOutAbove && isBlockOutBelow),\n        points: !(isBlockOutAbove && isBlockOutBelow) ? points : [],\n      };\n    }\n    return {\n      hasWinner: false,\n      points: [],\n    };\n  };\n\n  const checkingMainDiagonal = (board, row, col) => {\n    let points = [];\n\n    let isBlockOutAbove = false;\n    let isBlockOutBelow = false;\n\n    const curPlayer = board[row][col];\n    // count = 1 la vi tri hien tai.\n    let count = 1;\n    points.push({ row, col });\n\n    // dem ve 2 ben\n    for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; i -= 1, j -= 1) {\n      if (board[i][j] === curPlayer) {\n        count += 1;\n        points.push({ row: i, col: j });\n      } else {\n        if (board[i][j] !== null) {\n          isBlockOutAbove = true;\n        }\n        break;\n      }\n    }\n\n    for (let i = row + 1, j = col + 1; i < size && j < size; i += 1, j += 1) {\n      if (board[i][j] === curPlayer) {\n        count += 1;\n        points.push({ row: i, col: j });\n      } else {\n        if (board[i][j] !== null) {\n          isBlockOutBelow = true;\n        }\n        break;\n      }\n    }\n\n    if (count >= numToWin) {\n      // sort\n      points = points.sort((p1, p2) => {\n        return (p1.row + 1) * size + p1.col <= (p2.row + 1) * size + p2.col\n          ? -1\n          : 1;\n      });\n\n      points.splice(1, points.length - 2);\n\n      if (count > numToWin) {\n        return {\n          hasWinner: true,\n          points,\n        };\n      }\n      return {\n        hasWinner: !(isBlockOutAbove && isBlockOutBelow),\n        points: !(isBlockOutAbove && isBlockOutBelow) ? points : [],\n      };\n    }\n    return {\n      hasWinner: false,\n      points: [],\n    };\n  };\n\n  const checkingSubDiagonal = (board, row, col) => {\n    let points = [];\n\n    let isBlockOutAbove = false;\n    let isBlockOutBelow = false;\n\n    const curPlayer = board[row][col];\n    // count = 1 la vi tri hien tai.\n    let count = 1;\n    points.push({ row, col });\n\n    // dem ve 2 ben\n    for (let i = row - 1, j = col + 1; i >= 0 && j < size; i -= 1, j += 1) {\n      if (board[i][j] === curPlayer) {\n        count += 1;\n        points.push({ row: i, col: j });\n      } else {\n        if (board[i][j] !== null) {\n          isBlockOutAbove = true;\n        }\n        break;\n      }\n    }\n\n    for (let i = row + 1, j = col - 1; i < size && j >= 0; i += 1, j -= 1) {\n      if (board[i][j] === curPlayer) {\n        count += 1;\n        points.push({ row: i, col: j });\n      } else {\n        if (board[i][j] !== null) {\n          isBlockOutBelow = true;\n        }\n        break;\n      }\n    }\n\n    if (count >= numToWin) {\n      // sort\n      points = points.sort((p1, p2) => {\n        return (p1.row + 1) * size + p1.col <= (p2.row + 1) * size + p2.col\n          ? -1\n          : 1;\n      });\n\n      points.splice(1, points.length - 2);\n\n      if (count > numToWin) {\n        return {\n          hasWinner: true,\n          points,\n        };\n      }\n      return {\n        hasWinner: !(isBlockOutAbove && isBlockOutBelow),\n        points: !(isBlockOutAbove && isBlockOutBelow) ? points : [],\n      };\n    }\n    return {\n      hasWinner: false,\n      points: [],\n    };\n  };\n\n  const isTerminated = (board, row, col) => {\n    const retH = checkingHorizontal(board, row, col);\n    const retV = checkingVertical(board, row, col);\n    const retM = checkingMainDiagonal(board, row, col);\n    const retS = checkingSubDiagonal(board, row, col);\n\n    const listPoints = [];\n    if (retH.points.length === 2) listPoints.push(retH.points);\n    if (retV.points.length === 2) listPoints.push(retV.points);\n    if (retM.points.length === 2) listPoints.push(retM.points);\n    if (retS.points.length === 2) listPoints.push(retS.points);\n\n    const ret = {\n      hasWinner:\n        retH.hasWinner || retV.hasWinner || retM.hasWinner || retS.hasWinner,\n      listPoints,\n    };\n    return ret;\n  };\n\n  const isFull = board => {\n    return board.every(row => {\n      return row.every(cell => cell);\n    });\n  };\n\n  const showPlayer = () => {\n    let strPlayer = '';\n    let status = '';\n    if (winner !== null) {\n      strPlayer = winner === 1 ? 'X' : 'O';\n      status = 'Winner';\n    } else {\n      status = 'Player';\n      if (isFull(boardDisplay)) {\n        strPlayer = 'DRAW';\n      } else {\n        strPlayer = xIsNext ? 'X' : 'O';\n      }\n    }\n\n    return (\n      <>\n        {status}: &nbsp;\n        <span className={`player${` ${strPlayer}`}`}>{strPlayer}</span>\n      </>\n    );\n  };\n\n  const handleClick = (row, col) => {\n    // đọc lịch sử\n    const { list, step } = history;\n    const currentHistory = list.slice(0, step + 1);\n\n    // clone 2d array\n    const currentBoard = currentHistory[currentHistory.length - 1].board.map(\n      arr => [...arr],\n    );\n\n    const player = xIsNext ? 1 : 0;\n    if (winner !== null || currentBoard[row][col] !== null) return;\n    currentBoard[row][col] = player;\n    const result = isTerminated(currentBoard, row, col);\n\n    addHistoryItem({\n      board: currentBoard,\n      lastPosition: { x: row, y: col },\n      winner: result.hasWinner ? player : null,\n      id: step + 1,\n      listPoints: result.listPoints,\n    });\n\n    setTurn(!xIsNext);\n    setStep(currentHistory.length);\n    setWinner(result.hasWinner ? player : null);\n  };\n\n  const jumpTo = newStep => {\n    const { list } = history;\n    setStep(newStep);\n    setTurn(newStep % 2 === 0);\n    setWinner(list[newStep].winner);\n  };\n\n  const resetGame = () => {\n    emptyHistory();\n    setTurn(true);\n    setWinner(null);\n    setOpen(false);\n  };\n\n  return (\n    <div className='game-wrapper'>\n      <Card className='game-info'>\n        <Card.Content>\n          <Card.Header as='h1'>Caro Vietnam - v3</Card.Header>\n          <Card.Description>\n            <p>{showPlayer()}</p>\n\n            <Button size='small' onClick={() => setOpen(true)}>\n              Reset game\n            </Button>\n          </Card.Description>\n        </Card.Content>\n      </Card>\n\n      <Board\n        listPoints={listPointsDisplay}\n        board={boardDisplay}\n        xIsNext={xIsNext}\n        onClick={handleClick}\n        winner={winner}\n      />\n\n      <History\n        history={history.list}\n        sort={sortASC}\n        toggleSort={() => setSort(!sortASC)}\n        jumpTo={jumpTo}\n        selected={history.step}\n      />\n\n      <Confirm\n        open={open}\n        size='mini'\n        header='Reset game'\n        content='Do you want to reset this game?'\n        onCancel={() => setOpen(false)}\n        onConfirm={resetGame}\n      />\n    </div>\n  );\n};\n\nexport default Game;\n","export const MARK = 'MARK';\nexport const SET_TURN = 'SET_NEXT_TURN';\nexport const SET_WINNER = 'SET_WINNER';\nexport const ADD_HISTORY_ITEM = 'ADD_HISTORY_ITEM';\nexport const SET_STEP = 'SET_STEP';\nexport const EMPTY_HISTORY = 'EMPTY_HISTORY';\n\nexport function mark({ row, col, player }) {\n  return { type: MARK, row, col, player };\n}\n\nexport function setTurn(turn) {\n  return { type: SET_TURN, turn };\n}\n\nexport function setWinner(winner) {\n  return { type: SET_WINNER, winner };\n}\n\nexport function addHistoryItem(historyItem) {\n  return { type: ADD_HISTORY_ITEM, historyItem };\n}\n\nexport function setHistoryStep(step) {\n  return { type: SET_STEP, step };\n}\n\nexport function emptyHistory() {\n  return { type: EMPTY_HISTORY };\n}\n","import { connect } from 'react-redux';\nimport Game from '../components/Game';\nimport {\n  setHistoryStep,\n  setTurn,\n  addHistoryItem,\n  setWinner,\n  emptyHistory,\n} from '../actions';\n\nconst mapStateToProps = state => ({\n  board: state.board,\n  xIsNext: state.xIsNext,\n  winner: state.winner,\n  history: state.history,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setStep: step => dispatch(setHistoryStep(step)),\n  setTurn: turn => dispatch(setTurn(turn)),\n  addHistoryItem: historyItem => dispatch(addHistoryItem(historyItem)),\n  setWinner: winner => dispatch(setWinner(winner)),\n  emptyHistory: () => dispatch(emptyHistory()),\n});\n\nconst GameContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Game);\n\nexport default GameContainer;\n","import React from 'react';\nimport './App.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport GameContainer from './containers/GameContainer';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <GameContainer />\n    </div>\n  );\n}\n\nexport default App;\n","import { SET_TURN } from '../actions';\n\nfunction xIsNext(state = true, action) {\n  switch (action.type) {\n    case SET_TURN:\n      return action.turn;\n    default:\n      return state;\n  }\n}\n\nexport default xIsNext;\n","import { SET_WINNER } from '../actions';\n\nfunction winner(state = null, action) {\n  switch (action.type) {\n    case SET_WINNER:\n      return action.winner;\n    default:\n      return state;\n  }\n}\nexport default winner;\n","import { ADD_HISTORY_ITEM, SET_STEP, EMPTY_HISTORY } from '../actions';\n\nconst initialState = {\n  list: [\n    {\n      board: new Array(20).fill(null).map(() => new Array(20).fill(null)),\n      lastPosition: null,\n      id: 0,\n      winner: null,\n      listPoints: [],\n    },\n  ],\n  step: 0,\n};\n\nfunction history(state = initialState, action) {\n  switch (action.type) {\n    case ADD_HISTORY_ITEM:\n      // them history tai vi tri step\n      return {\n        ...state,\n        list: state.list.slice(0, state.step + 1).concat([action.historyItem]),\n      };\n    case EMPTY_HISTORY:\n      return initialState;\n    case SET_STEP:\n      return { ...state, step: action.step };\n    default:\n      return state;\n  }\n}\n\nexport default history;\n","import { combineReducers } from 'redux';\nimport turn from './turn.reducer';\nimport winner from './winner.reducer';\nimport history from './history.reducer';\n\nexport default combineReducers({\n  xIsNext: turn,\n  winner,\n  history,\n});\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport './index.css';\nimport App from './App';\nimport rootReducer from './reducers';\n\nconst store = createStore(\n  rootReducer,\n  // eslint-disable-next-line no-underscore-dangle\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n);\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}